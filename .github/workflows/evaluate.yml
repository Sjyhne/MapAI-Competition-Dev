# This is a basic workflow to help you get started with Actions

name: Evaluation Pipeline

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v3

      - name: Triggering actor
        run: |
          echo "${{ github.triggering_actor }}"
          echo "${{ github.repository_owner }}"

      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJSON(github.event) }}
        run: echo "$GITHUB_CONTEXT"

      - name: "Checkout private repo with PAT"
        run: |
          echo CLONING
          if [ "${{ github.triggering_actor }}" == "Sjyhne" ]; then
            echo PRIVATE CLONE
            git clone https://${{ secrets.PAT_EVALUATION_DATA }}@github.com/Sjyhne/mapai_evaluation_data.git data
          else
            echo PUBLIC CLONE
            git clone https://github.com/Sjyhne/mapai_validation_data.git data
          fi

      - name: "What is in my repo"
        run: |
          ls


      # Runs a set of commands using the runners shell
      - name: Evaluation
        run: |
          if [ "${{ github.triggering_actor }}" == "Sjyhne" ]; then
            for d in */ ; do
              if [ "participant" == *"$d" ]; then
                cp data/evaluation.py "$d"/.
                cd $d
                pip3 install -r requirements.txt
                python3 evaluate_task_1.py --data_percentage 0.01 --dtype test
                python3 evaluate_task_2.py --data_percentage 0.01 --dtype test
                python3 evaluation.py --data_percentage 0.01 --dtype test --task 1
                python3 evaluation.py --data_percentage 0.01 --dtype test --task 2
                echo Finished evaluation, exiting
                cd ..
              else
                echo "$d"
              fi
            done
          else
            for d in */ ; do
              if [ "participant" == *"$d" ]; then
                cp data/evaluation.py "$d"/.
                cd $d
                pip3 install -r requirements.txt
                python3 evaluate_task_1.py --data_percentage 0.01 --dtype val
                python3 evaluate_task_2.py --data_percentage 0.01 --dtype val
                python3 evaluation.py --data_percentage 0.01 --dtype val --task 1
                python3 evaluation.py --data_percentage 0.01 --dtype val --task 2
                echo Finished evaluation, exiting
                cd ..
              else
                echo "$d"
              fi
            done
          fi